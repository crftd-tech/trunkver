tests:
  - name: parse/from-stdin
    args:
      - parse
    stdin: "20240522142548.0.0-g1234567-R4242"
    filter:
      - jq
      - .
    stdout: |
      {"timestamp":"2024-05-22T14:25:48Z","sourceRef":{"commitHash":"1234567","scmPrefix":"g","rawRef":"g1234567"},"buildRef":"R4242"}
  - name: parse/default-is-json
    args:
      - parse
      - "20240522142548.0.0-g1234567-R4242"
    filter:
      - jq
      - .
    stdout: |
      {"timestamp":"2024-05-22T14:25:48Z","sourceRef":{"commitHash":"1234567","scmPrefix":"g","rawRef":"g1234567"},"buildRef":"R4242"}

  - name: parse/go-format
    args:
      - parse
      - "20240522142548.0.0-g1234567-R4242"
      - --format 
      - '{{ .Timestamp.Format "20060102150405" }}/{{ .SourceRef.RawRef }}/{{ .BuildRef }}'
    stdout: |
      20240522142548/g1234567/R4242

  - name: generate/slugifies-illegal-characters
    args:
      - generate
      - --timestamp 
      - "2024-05-22T16:25:48+02:00"
      - --source-ref
      - "g1234567$_-+"
      - --build-ref
      - "R4242$_hy$phen-is-okay-in-build-ref+"
    stdout: |
      20240522142548.0.0-g1234567-R4242--hy-phen-is-okay-in-build-ref-

  - name: generate/simple
    args:
      - generate
      - --timestamp 
      - "2024-05-22T16:25:48+02:00"
      - --source-ref
      - "g1234567"
      - --build-ref
      - "R4242"
    stdout: |
      20240522142548.0.0-g1234567-R4242

  - name: generate/simple-output
    args:
      - generate
      - --timestamp 
      - "2024-05-22T16:25:48+02:00"
      - --source-ref
      - "g1234567"
      - --build-ref
      - "R4242"
      - --output
      - "out/output.txt"
    stdout: |
      20240522142548.0.0-g1234567-R4242
    files:
      - path: out/output.txt
        contents: |
          20240522142548.0.0-g1234567-R4242
    revert:
      - out

  - name: generate/formatted-output
    args:
      - generate
      - --timestamp 
      - "2024-05-22T16:25:48+02:00"
      - --source-ref
      - "g1234567"
      - --build-ref
      - "R4242"
      - --output
      - "out/output.txt"
      - --format
      - "trunkver={{ . }}"
    stdout: |
      trunkver=20240522142548.0.0-g1234567-R4242
    files:
      - path: out/output.txt
        contents: |
          trunkver=20240522142548.0.0-g1234567-R4242
    revert:
      - out

  - name: generate/prerelease
    args:
      - generate
      - --timestamp 
      - "2024-05-22T16:25:48+02:00"
      - --source-ref
      - "g1234567"
      - --build-ref
      - "R4242"
      - --prerelease
    stdout: |
      20240522142548-g1234567-R4242

  - name: generate/prerelease-stdin
    stdin: "v1.2.3"
    args:
      - generate
      - --timestamp
      - "2024-05-22T16:25:48+02:00"
      - --source-ref
      - "g1234567"
      - --build-ref
      - "R4242"
      - --prerelease
    stdout: |
      1.2.3-20240522142548-g1234567-R4242

  - name: generate/prerelease/coerces-into-semver
    args:
      - generate
      - --timestamp 
      - "2024-05-22T16:25:48+02:00"
      - --source-ref
      - "g1234567"
      - --build-ref
      - "R4242"
      - --prerelease
      - "0"
    stdout: |
      0.0.0-20240522142548-g1234567-R4242

  - name: generate/prerelease/with-given-semver
    args:
      - generate
      - --timestamp 
      - "2024-05-22T16:25:48+02:00"
      - --source-ref
      - "g1234567"
      - --build-ref
      - "R4242"
      - --prerelease
      - "0.1.0"
    stdout: |
      0.1.0-20240522142548-g1234567-R4242

  - name: generate/prerelease/with-given-semver-with-v
    args:
      - generate
      - --timestamp 
      - "2024-05-22T16:25:48+02:00"
      - --source-ref
      - "g1234567"
      - --build-ref
      - "R4242"
      - --prerelease
      - "v0.1.0"
    stdout: |
      0.1.0-20240522142548-g1234567-R4242


  - name: generate/panic/if-no-build-ref
    args:
      - generate
      - --timestamp 
      - "2024-05-22T16:25:48+02:00"
      - --source-ref
      - "g1234567"
    exit-status: 1
    stderr: |
      Error: --build-ref missing, your CI might be unsupported. It should identify the log that was produced during creation of this artifact, e.g. the job id in Github Actions

  - name: generate/panic/if-no-source-ref
    args:
      - generate
      - --timestamp 
      - "2024-05-22T16:25:48+02:00"
      - --build-ref
      - "1234567"
    exit-status: 1
    stderr: |
      Error: --source-ref missing, your CI might be unsupported. It should identify the commit that was used to build this artifact, e.g. "g${GITHUB_SHA:0:7}" or "g$(git rev-parse --short HEAD)".

  - name: generate/ci/github
    environment:
      GITHUB_SHA: 1234567890abcdef1234567890abcdef12345678
      GITHUB_RUN_ID: GITHUBRUN
      GITHUB_RUN_ATTEMPT: "3"
    args: 
      - generate
      - --timestamp 
      - "2024-05-22T16:25:48+02:00"
    stdout: |
      20240522142548.0.0-g1234567-GITHUBRUN-3

  - name: generate/ci/gitlab
    environment:
      GITLAB_CI: "true"
      CI_COMMIT_SHA: 1234567890abcdef1234567890abcdef12345678
      CI_JOB_ID: GITLABRUN
    args: 
      - generate
      - --timestamp 
      - "2024-05-22T16:25:48+02:00"
    stdout: |
      20240522142548.0.0-g1234567-GITLABRUN

  - name: generate/ci/circleci
    environment:
      CIRCLECI: "true"
      CIRCLE_SHA1: 1234567890abcdef1234567890abcdef12345678
      CIRCLE_WORKFLOW_JOB_ID: CIRCLECIJOB
    args: 
      - generate
      - --timestamp 
      - "2024-05-22T16:25:48+02:00"
    stdout: |
      20240522142548.0.0-g1234567-CIRCLECIJOB
